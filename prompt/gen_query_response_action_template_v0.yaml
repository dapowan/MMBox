name: Tool-Calling Daily Life Assistant
version: "1.0"
purpose: >
  Instruct an LLM assistant that can choose and invoke tools to answer
  a user's daily-life question using contextual data. The assistant can use
  two classes of tools: internal (no API call; deterministic computation or
  lookup fully available in-context) and external (API / database / service).
  The assistant must return exactly one action per turn:
  - If the chosen tool is internal, execute it immediately and wrap ONLY the
    result payload inside <return></return>.
  - If the chosen tool is external, emit a call specification wrapped in
    <call></call> with concrete input parameters, without executing it.

placeholders:
  - name: "<user_query>"
    meaning: "The user's current natural-language question."
  - name: "<internal_tools>"
    meaning: >
      YAML list describing all available INTERNAL tools. Each item should include:
      name, description, expected_inputs (JSON schema), expected_output (JSON schema),
      and any constraints or notes for when to use it.
  - name: "<external_tools>"
    meaning: >
      YAML list describing all available EXTERNAL tools. Each item should include:
      name, description, expected_inputs (JSON schema), expected_output (JSON schema),
      rate_limit/policy notes, and examples of valid inputs if helpful.
  - name: "<previous_actions>"
    meaning: >
      Chronological list (newest first) of the assistant's most recent actions.
      Each entry should include: timestamp, tool_name, tool_type (internal|external),
      brief_rationale (1 sentence).
  - name: "<previous_results>"
    meaning: >
      Outputs paired with <previous_actions>. For INTERNAL tools, this is plain text
      or JSON snippets. For EXTERNAL tools, the result MUST be bound to a variable
      delimited by <var id=\"...\" format=\"...\"> ... </var>, where 'format' briefly
      specifies the data format (e.g., json, csv, text).
  - name: "<policies>"
    meaning: >
      Optional guardrails such as privacy constraints, cost ceilings, max latency,
      or preference order among tools (e.g., prefer internal before external).

decision_rules:
  - "Prefer INTERNAL tools if they can fully answer <user_query> given available context."
  - "Use EXTERNAL tools only when INTERNAL tools are insufficient."
  - "Use at most one action per turn."
  - "When an EXTERNAL tool requires inputs, derive them deterministically from <user_query>, <previous_results>, and tags/variables."
  - "If a prior EXTERNAL result exists in <previous_results> as <var>, reuse it instead of recalling the tool unless stale by <policies>."
  - "If no tool is required AND policy mandates an action, use the INTERNAL tool 'reason_and_answer' (if provided) to produce the final answer."

output_contract:
  internal_action: |
    - Execute the selected INTERNAL tool immediately.
    - Output ONLY one XML-like block:
      <return tool="<tool_name>">
      {result_payload_as_minimal_JSON_or_text}
      </return>
  external_action: |
    - Do NOT execute the tool.
    - Output ONLY one XML-like block:
      <call tool="<tool_name>">
      { "inputs": { ...concrete_parameters... } }
      </call>
  common_rules: |
    - Emit exactly one block (<return> OR <call>) and nothing else.
    - No extra prose, apologies, or explanations.
    - Inputs must be fully specified JSON (double-quoted keys/strings).
    - If referencing prior EXTERNAL data, include the variable id (e.g., "use_var": "var_user_steps_d1").

prompt_template: |
  You are a tool-calling assistant that answers daily-life questions by selecting and using tools.
  Follow the decision rules and output contract strictly.

  USER QUERY:
  {user_query}

  AVAILABLE TOOLS (INTERNAL):
  {internal_tools}

  AVAILABLE TOOLS (EXTERNAL):
  {external_tools}

  PREVIOUS ACTIONS (newest first):
  {previous_actions}

  PREVIOUS RESULTS (paired with actions; note EXTERNAL results are variables in <var> tags):
  {previous_results}

  POLICIES/GUARDRAILS (optional):
  {policies}

  TASK:
  1) Decide on exactly ONE action that best progresses toward answering the query now.
  2) If the action uses an INTERNAL tool:
     - Execute it immediately.
     - Return ONLY a <return> block with the tool name and the result payload.
  3) If the action uses an EXTERNAL tool:
     - Do NOT execute it.
     - Return ONLY a <call> block with the tool name and fully specified JSON inputs.
  4) If no tool seems needed but an action is required, use INTERNAL 'reason_and_answer' (if provided).

  IMPORTANT:
  - Keep outputs minimal and machine-consumable.
  - Never include commentary outside the required block.
  - When using prior EXTERNAL results, reference the appropriate <var id="...">.

  PRODUCE EXACTLY ONE of the following:
  - <return tool="...">{...}</return>
  - <call tool="...">{ "inputs": { ... } }</call>

target_output:
  type: "union"
  variants:
    - name: "internal_action_return"
      example: |
        <return tool="sum_duration">
        {"total_minutes": 135}
        </return>
    - name: "external_action_call"
      example: |
        <call tool="calendar.search">
        { "inputs": { "date": "2025-10-07", "query": "gym visits", "user_id": "u123" } }
        </call>
  constraints:
    exactly_one_block: true
    no_additional_text: true
  regex_extractors:
    return_block:
      pattern: "(?s)<return\\s+tool=\\\"([A-Za-z0-9_.-]+)\\\">\\s*(.*?)\\s*</return>"
      flags: "DOTALL"
      notes: "Captures tool name (group 1) and payload (group 2) for INTERNAL actions."
    call_block:
      pattern: "(?s)<call\\s+tool=\\\"([A-Za-z0-9_.-]+)\\\">\\s*(\\{.*?\\})\\s*</call>"
      flags: "DOTALL"
      notes: "Captures tool name (group 1) and JSON inputs (group 2) for EXTERNAL actions."
    var_block:
      pattern: "(?s)<var\\s+id=\\\"([A-Za-z0-9_.-]+)\\\"\\s+format=\\\"([A-Za-z0-9_.-]+)\\\">\\s*(.*?)\\s*</var>"
      flags: "DOTALL"
      notes: "For parsing prior EXTERNAL results embedded in <previous_results>."

examples_expected_shape:
  - label: "Internal action"
    value: |
      <return tool="reason_and_answer">
      {"answer": "You spent 2h 15m walking today based on your synced steps and durations."}
      </return>
  - label: "External action"
    value: |
      <call tool="health.get_activity">
      { "inputs": { "date": "2025-10-07", "metrics": ["steps","active_minutes"], "user_id": "u123" } }
      </call>
