{
  "basic_tools": [
    {
      "name": "resolve_time_window",
      "description": "Turn a natural-language <time> (e.g., 'yesterday', 'last week', '2025-09-01', 'Sep 1-7, 2025') into an absolute [start, end). Also supports time-of-day slices like 'morning'.",
      "parameters": {
        "type": "object",
        "properties": {
          "time_text": {
            "type": "string"
          },
          "timezone": {
            "type": "string",
            "default": "Asia/Beijing"
          }
        },
        "required": [
          "time_text"
        ]
      },
      "returns": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "inclusive ISO-8601 datetime"
          },
          "end": {
            "type": "string",
            "description": "exclusive ISO-8601 datetime"
          },
          "slice": {
            "type": "string",
            "description": "optional, e.g., 'morning', 'evening'",
            "nullable": true
          }
        }
      },
      "examples": [
        {
          "input": {
            "time_text": "last week"
          },
          "output": {
            "start": "2025-09-29T00:00:00+09:00",
            "end": "2025-10-06T00:00:00+09:00"
          }
        }
      ]
    },
    {
      "name": "split_time_window",
      "description": "Split a resolved [start, end) time window into smaller bins for trend analysis or per-period aggregation. The bin size is specified by a frequency unit and value (e.g., freq_unit='minute', freq_value=2 means 2-minute bins).",
      "parameters": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "inclusive ISO-8601 datetime (usually from resolve_time_window)"
          },
          "end": {
            "type": "string",
            "description": "exclusive ISO-8601 datetime"
          },
          "freq_unit": {
            "type": "string",
            "enum": [
              "minute",
              "hour",
              "day",
              "week",
              "month"
            ],
            "description": "the unit of the bin size"
          },
          "freq_value": {
            "type": "integer",
            "minimum": 1,
            "description": "the number of units per bin (e.g., 2 with freq_unit='hour' â†’ 2-hour bins)"
          },
          "timezone": {
            "type": "string",
            "default": "Asia/Beijing",
            "description": "IANA timezone for calendar alignment"
          },
          "include_partial": {
            "type": "boolean",
            "default": true,
            "description": "whether to include head/tail partial bins"
          }
        },
        "required": [
          "start",
          "end",
          "freq_unit",
          "freq_value"
        ]
      },
      "returns": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "start": {
              "type": "string",
              "description": "inclusive ISO-8601 datetime of the bin"
            },
            "end": {
              "type": "string",
              "description": "exclusive ISO-8601 datetime of the bin"
            },
            "label": {
              "type": "string",
              "description": "human-friendly label (e.g., '2025-09-29', '2025-W40', '00:00-02:00')"
            },
            "index": {
              "type": "integer",
              "description": "0-based index of the bin in the split"
            }
          }
        }
      },
      "examples": [
        {
          "input": {
            "start": "2025-09-29T00:00:00+08:00",
            "end": "2025-10-06T00:00:00+08:00",
            "freq_unit": "day",
            "freq_value": 1
          },
          "output": [
            {
              "start": "2025-09-29T00:00:00+08:00",
              "end": "2025-09-30T00:00:00+08:00",
              "label": "2025-09-29",
              "index": 0
            },
            {
              "start": "2025-09-30T00:00:00+08:00",
              "end": "2025-10-01T00:00:00+08:00",
              "label": "2025-09-30",
              "index": 1
            },
            "... more bins ..."
          ]
        },
        {
          "input": {
            "start": "2025-10-04T00:00:00+08:00",
            "end": "2025-10-05T00:00:00+08:00",
            "freq_unit": "hour",
            "freq_value": 2
          },
          "output": [
            {
              "start": "2025-10-04T00:00:00+08:00",
              "end": "2025-10-04T02:00:00+08:00",
              "label": "00:00-02:00",
              "index": 0
            },
            {
              "start": "2025-10-04T02:00:00+08:00",
              "end": "2025-10-04T04:00:00+08:00",
              "label": "02:00-04:00",
              "index": 1
            },
            "... more bins ..."
          ]
        }
      ]
    },
    {
      "name": "sum_duration",
      "description": "Sum up a list of durations (in minutes). Designed for Duration queries like 'How long did I walk today?'.",
      "parameters": {
        "type": "object",
        "properties": {
          "minutes_list": {
            "type": "array",
            "description": "List of durations in minutes to be summed.",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "minutes_list"
        ]
      },
      "returns": {
        "type": "object",
        "properties": {
          "total_minutes": {
            "type": "number",
            "description": "The sum of all input durations in minutes."
          }
        }
      },
      "examples": [
        {
          "input": {
            "minutes_list": [
              30,
              45,
              60
            ]
          },
          "output": {
            "total_minutes": 135
          }
        },
        {
          "input": {
            "minutes_list": []
          },
          "output": {
            "total_minutes": 0
          }
        },
        {
          "input": {
            "minutes_list": [
              10,
              20,
              15,
              5
            ]
          },
          "output": {
            "total_minutes": 50
          }
        }
      ]
    },
    {
      "name": "sum_frequency",
      "description": "Sum up a list of frequency values (integers). Designed for Frequency queries like 'How many times did X happen?'.",
      "parameters": {
        "type": "object",
        "properties": {
          "frequency_list": {
            "type": "array",
            "description": "List of frequency values (integers) to be summed.",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "frequency_list"
        ]
      },
      "returns": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The sum of all input frequency values."
          }
        }
      },
      "examples": [
        {
          "input": {
            "frequency_list": [
              1,
              1,
              1,
              1
            ]
          },
          "output": {
            "count": 4
          }
        },
        {
          "input": {
            "frequency_list": []
          },
          "output": {
            "count": 0
          }
        },
        {
          "input": {
            "frequency_list": [
              2,
              5,
              3
            ]
          },
          "output": {
            "count": 10
          }
        }
      ]
    },
    {
      "name": "check_existence",
      "description": "Check if there exists at least one behavior context matching given optional conditions (place, action, activity, person, event, weather). Returns true or false.",
      "parameters": {
        "type": "object",
        "properties": {
          "contexts": {
            "type": "array",
            "description": "List of behavior contexts (events, visits, sessions, etc.) to check against conditions.",
            "items": {
              "type": "object"
            }
          },
          "place": {
            "type": "string",
            "nullable": true,
            "description": "Optional place identifier or name to match."
          },
          "action": {
            "type": "string",
            "nullable": true,
            "description": "Optional action keyword to match (e.g., 'arrive', 'leave')."
          },
          "activity": {
            "type": "string",
            "nullable": true,
            "description": "Optional activity to match (e.g., 'walk', 'run')."
          },
          "person": {
            "type": "string",
            "nullable": true,
            "description": "Optional person identifier or name to match."
          },
          "event": {
            "type": "string",
            "nullable": true,
            "description": "Optional event type to match (e.g., 'meeting')."
          },
          "weather": {
            "type": "string",
            "nullable": true,
            "description": "Optional weather condition to match (e.g., 'rainy')."
          }
        },
        "required": [
          "contexts"
        ]
      },
      "returns": {
        "type": "object",
        "properties": {
          "exists": {
            "type": "boolean",
            "description": "True if at least one context matches the given conditions; false otherwise."
          }
        }
      },
      "examples": [
        {
          "input": {
            "contexts": [
              {
                "place": "office",
                "activity": "work",
                "person": "alice",
                "event": "meeting"
              },
              {
                "place": "gym",
                "activity": "run"
              }
            ],
            "place": "office",
            "event": "meeting"
          },
          "output": {
            "exists": true
          }
        },
        {
          "input": {
            "contexts": [
              {
                "place": "home",
                "activity": "sleep"
              }
            ],
            "activity": "run"
          },
          "output": {
            "exists": false
          }
        },
        {
          "input": {
            "contexts": [
              {
                "place": "park",
                "activity": "walk",
                "weather": "sunny"
              },
              {
                "place": "office",
                "activity": "work",
                "weather": "rainy"
              }
            ],
            "weather": "rainy"
          },
          "output": {
            "exists": true
          }
        }
      ]
    },

  ]
}